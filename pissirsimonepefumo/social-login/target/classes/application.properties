
# GitHub Login
spring.security.oauth2.client.registration.github.client-id=092c89387a23e32ddfc7
spring.security.oauth2.client.registration.github.client-secret=08369ab280b7517f04414ed7cc9f42034a98622e
#spring.security.oauth2.client.registration.github.scope=email, public_profile

# Google Login
#spring.security.oauth2.client.registration.google.client-id=GOOGLE_CLIENT_ID
#spring.security.oauth2.client.registration.google.client-secret=GOOGLE_CLIENT_SECRET

logging.level.org.springframework.security=TRACE



spring.kafka.ssl.key-store-location=file:parcheggio.jks

debug=true



# The format used for the keystore. JKS o PKCS
#server.ssl.key-store-type=JKS
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore/parcheggio.jks
# The password used to generate the certificate
#server.ssl.key-store-password=password
# The alias mapped to the certificate
#server.ssl.key-alias=spring-https
# Run Spring Boot on HTTPS only
#server.port=8000
--------------
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/parcheggio.p12
# The password used to generate the certificate
server.ssl.key-store-password=password
# The alias mapped to the certificate
server.ssl.key-alias=spring-https

server.port=8000

server.ssl.enabled=true

server.error.whitelabel.enabled=false

spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false